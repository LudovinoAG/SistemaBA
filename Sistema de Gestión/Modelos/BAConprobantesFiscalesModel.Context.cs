//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sistema_de_Gestión.Modelos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BAComprobantesFiscalesEntities : DbContext
    {
        public BAComprobantesFiscalesEntities()
            : base("name=BAComprobantesFiscalesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<VW_VerComprobantesFiscales> VW_VerComprobantesFiscales { get; set; }
    
        public virtual int SP_InsertarComprobantes(Nullable<int> comprobanteDesde, Nullable<int> comprobanteHasta, Nullable<int> cantidad_Comprobantes, Nullable<System.DateTime> fecha_Vencimiento, string estatus_Comprobante, string serie, string tipo)
        {
            var comprobanteDesdeParameter = comprobanteDesde.HasValue ?
                new ObjectParameter("ComprobanteDesde", comprobanteDesde) :
                new ObjectParameter("ComprobanteDesde", typeof(int));
    
            var comprobanteHastaParameter = comprobanteHasta.HasValue ?
                new ObjectParameter("ComprobanteHasta", comprobanteHasta) :
                new ObjectParameter("ComprobanteHasta", typeof(int));
    
            var cantidad_ComprobantesParameter = cantidad_Comprobantes.HasValue ?
                new ObjectParameter("Cantidad_Comprobantes", cantidad_Comprobantes) :
                new ObjectParameter("Cantidad_Comprobantes", typeof(int));
    
            var fecha_VencimientoParameter = fecha_Vencimiento.HasValue ?
                new ObjectParameter("Fecha_Vencimiento", fecha_Vencimiento) :
                new ObjectParameter("Fecha_Vencimiento", typeof(System.DateTime));
    
            var estatus_ComprobanteParameter = estatus_Comprobante != null ?
                new ObjectParameter("Estatus_Comprobante", estatus_Comprobante) :
                new ObjectParameter("Estatus_Comprobante", typeof(string));
    
            var serieParameter = serie != null ?
                new ObjectParameter("Serie", serie) :
                new ObjectParameter("Serie", typeof(string));
    
            var tipoParameter = tipo != null ?
                new ObjectParameter("Tipo", tipo) :
                new ObjectParameter("Tipo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertarComprobantes", comprobanteDesdeParameter, comprobanteHastaParameter, cantidad_ComprobantesParameter, fecha_VencimientoParameter, estatus_ComprobanteParameter, serieParameter, tipoParameter);
        }
    
        public virtual int SP_ActualizarUsoComprobante(Nullable<int> id_Comprobante, Nullable<int> cantidad_Usada)
        {
            var id_ComprobanteParameter = id_Comprobante.HasValue ?
                new ObjectParameter("id_Comprobante", id_Comprobante) :
                new ObjectParameter("id_Comprobante", typeof(int));
    
            var cantidad_UsadaParameter = cantidad_Usada.HasValue ?
                new ObjectParameter("Cantidad_Usada", cantidad_Usada) :
                new ObjectParameter("Cantidad_Usada", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ActualizarUsoComprobante", id_ComprobanteParameter, cantidad_UsadaParameter);
        }
    
        public virtual int SP_DesactivarComprobante(Nullable<int> iDComprobante)
        {
            var iDComprobanteParameter = iDComprobante.HasValue ?
                new ObjectParameter("IDComprobante", iDComprobante) :
                new ObjectParameter("IDComprobante", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DesactivarComprobante", iDComprobanteParameter);
        }
    }
}
