//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sistema_de_Gestión.Modelos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BAFacturacionEntities : DbContext
    {
        public BAFacturacionEntities()
            : base("name=BAFacturacionEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<VW_ListarVehiculos> VW_ListarVehiculos { get; set; }
        public virtual DbSet<VW_ListarMedidas> VW_ListarMedidas { get; set; }
        public virtual DbSet<VW_ProductosFactura> VW_ProductosFactura { get; set; }
        public virtual DbSet<VW_EmpleadosFactura> VW_EmpleadosFactura { get; set; }
        public virtual DbSet<VW_VerUltimoNumeroFactura> VW_VerUltimoNumeroFactura { get; set; }
        public virtual DbSet<VW_ListarBancos> VW_ListarBancos { get; set; }
        public virtual DbSet<VW_ListarMetodos> VW_ListarMetodos { get; set; }
    
        public virtual int SP_InsertarConduce(Nullable<int> id_Conduce, Nullable<int> id_Factura, Nullable<int> id_Empleado, Nullable<int> num_Conduce, Nullable<int> id_Producto, Nullable<int> id_Vehiculo, Nullable<int> id_Medida, Nullable<int> cantidadViajes)
        {
            var id_ConduceParameter = id_Conduce.HasValue ?
                new ObjectParameter("id_Conduce", id_Conduce) :
                new ObjectParameter("id_Conduce", typeof(int));
    
            var id_FacturaParameter = id_Factura.HasValue ?
                new ObjectParameter("id_Factura", id_Factura) :
                new ObjectParameter("id_Factura", typeof(int));
    
            var id_EmpleadoParameter = id_Empleado.HasValue ?
                new ObjectParameter("id_Empleado", id_Empleado) :
                new ObjectParameter("id_Empleado", typeof(int));
    
            var num_ConduceParameter = num_Conduce.HasValue ?
                new ObjectParameter("Num_Conduce", num_Conduce) :
                new ObjectParameter("Num_Conduce", typeof(int));
    
            var id_ProductoParameter = id_Producto.HasValue ?
                new ObjectParameter("id_Producto", id_Producto) :
                new ObjectParameter("id_Producto", typeof(int));
    
            var id_VehiculoParameter = id_Vehiculo.HasValue ?
                new ObjectParameter("id_Vehiculo", id_Vehiculo) :
                new ObjectParameter("id_Vehiculo", typeof(int));
    
            var id_MedidaParameter = id_Medida.HasValue ?
                new ObjectParameter("id_Medida", id_Medida) :
                new ObjectParameter("id_Medida", typeof(int));
    
            var cantidadViajesParameter = cantidadViajes.HasValue ?
                new ObjectParameter("CantidadViajes", cantidadViajes) :
                new ObjectParameter("CantidadViajes", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertarConduce", id_ConduceParameter, id_FacturaParameter, id_EmpleadoParameter, num_ConduceParameter, id_ProductoParameter, id_VehiculoParameter, id_MedidaParameter, cantidadViajesParameter);
        }
    
        public virtual int SP_InsertarConduces(Nullable<int> id_Empleado, Nullable<int> num_Conduce, Nullable<int> id_producto, Nullable<int> id_vehiculo, Nullable<int> id_medida, Nullable<int> cantidadViajes)
        {
            var id_EmpleadoParameter = id_Empleado.HasValue ?
                new ObjectParameter("id_Empleado", id_Empleado) :
                new ObjectParameter("id_Empleado", typeof(int));
    
            var num_ConduceParameter = num_Conduce.HasValue ?
                new ObjectParameter("num_Conduce", num_Conduce) :
                new ObjectParameter("num_Conduce", typeof(int));
    
            var id_productoParameter = id_producto.HasValue ?
                new ObjectParameter("id_producto", id_producto) :
                new ObjectParameter("id_producto", typeof(int));
    
            var id_vehiculoParameter = id_vehiculo.HasValue ?
                new ObjectParameter("id_vehiculo", id_vehiculo) :
                new ObjectParameter("id_vehiculo", typeof(int));
    
            var id_medidaParameter = id_medida.HasValue ?
                new ObjectParameter("id_medida", id_medida) :
                new ObjectParameter("id_medida", typeof(int));
    
            var cantidadViajesParameter = cantidadViajes.HasValue ?
                new ObjectParameter("CantidadViajes", cantidadViajes) :
                new ObjectParameter("CantidadViajes", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertarConduces", id_EmpleadoParameter, num_ConduceParameter, id_productoParameter, id_vehiculoParameter, id_medidaParameter, cantidadViajesParameter);
        }
    
        public virtual int SP_InsertarDetallesFactura(Nullable<int> idProducto, Nullable<int> cantidadProductos, Nullable<int> idMedida, string descripcion, Nullable<decimal> precio, Nullable<decimal> subTotalProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            var cantidadProductosParameter = cantidadProductos.HasValue ?
                new ObjectParameter("CantidadProductos", cantidadProductos) :
                new ObjectParameter("CantidadProductos", typeof(int));
    
            var idMedidaParameter = idMedida.HasValue ?
                new ObjectParameter("idMedida", idMedida) :
                new ObjectParameter("idMedida", typeof(int));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var subTotalProductoParameter = subTotalProducto.HasValue ?
                new ObjectParameter("SubTotalProducto", subTotalProducto) :
                new ObjectParameter("SubTotalProducto", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertarDetallesFactura", idProductoParameter, cantidadProductosParameter, idMedidaParameter, descripcionParameter, precioParameter, subTotalProductoParameter);
        }
    
        public virtual ObjectResult<SP_VerDetallesConduces_Result> SP_VerDetallesConduces(Nullable<int> numFacturaConduce)
        {
            var numFacturaConduceParameter = numFacturaConduce.HasValue ?
                new ObjectParameter("NumFacturaConduce", numFacturaConduce) :
                new ObjectParameter("NumFacturaConduce", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VerDetallesConduces_Result>("SP_VerDetallesConduces", numFacturaConduceParameter);
        }
    
        public virtual ObjectResult<SP_BuscarClienteCodigo_Result> SP_BuscarClienteCodigo(string codigo_Cliente)
        {
            var codigo_ClienteParameter = codigo_Cliente != null ?
                new ObjectParameter("Codigo_Cliente", codigo_Cliente) :
                new ObjectParameter("Codigo_Cliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BuscarClienteCodigo_Result>("SP_BuscarClienteCodigo", codigo_ClienteParameter);
        }
    
        public virtual ObjectResult<SP_VerFacturaID_Result> SP_VerFacturaID(Nullable<int> numFactura)
        {
            var numFacturaParameter = numFactura.HasValue ?
                new ObjectParameter("NumFactura", numFactura) :
                new ObjectParameter("NumFactura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VerFacturaID_Result>("SP_VerFacturaID", numFacturaParameter);
        }
    
        public virtual int SP_RealizarPagoFactura(Nullable<int> id_Factura, Nullable<int> id_ModoPago, string conceptoPago, Nullable<int> numCheque, Nullable<int> banco, string cuentaOrigen, Nullable<decimal> totalPago, Nullable<System.DateTime> fechaPago, string tipoPago)
        {
            var id_FacturaParameter = id_Factura.HasValue ?
                new ObjectParameter("id_Factura", id_Factura) :
                new ObjectParameter("id_Factura", typeof(int));
    
            var id_ModoPagoParameter = id_ModoPago.HasValue ?
                new ObjectParameter("id_ModoPago", id_ModoPago) :
                new ObjectParameter("id_ModoPago", typeof(int));
    
            var conceptoPagoParameter = conceptoPago != null ?
                new ObjectParameter("ConceptoPago", conceptoPago) :
                new ObjectParameter("ConceptoPago", typeof(string));
    
            var numChequeParameter = numCheque.HasValue ?
                new ObjectParameter("NumCheque", numCheque) :
                new ObjectParameter("NumCheque", typeof(int));
    
            var bancoParameter = banco.HasValue ?
                new ObjectParameter("Banco", banco) :
                new ObjectParameter("Banco", typeof(int));
    
            var cuentaOrigenParameter = cuentaOrigen != null ?
                new ObjectParameter("CuentaOrigen", cuentaOrigen) :
                new ObjectParameter("CuentaOrigen", typeof(string));
    
            var totalPagoParameter = totalPago.HasValue ?
                new ObjectParameter("TotalPago", totalPago) :
                new ObjectParameter("TotalPago", typeof(decimal));
    
            var fechaPagoParameter = fechaPago.HasValue ?
                new ObjectParameter("FechaPago", fechaPago) :
                new ObjectParameter("FechaPago", typeof(System.DateTime));
    
            var tipoPagoParameter = tipoPago != null ?
                new ObjectParameter("TipoPago", tipoPago) :
                new ObjectParameter("TipoPago", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RealizarPagoFactura", id_FacturaParameter, id_ModoPagoParameter, conceptoPagoParameter, numChequeParameter, bancoParameter, cuentaOrigenParameter, totalPagoParameter, fechaPagoParameter, tipoPagoParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_VerMontoPendienteFactura(Nullable<int> idFactura)
        {
            var idFacturaParameter = idFactura.HasValue ?
                new ObjectParameter("idFactura", idFactura) :
                new ObjectParameter("idFactura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_VerMontoPendienteFactura", idFacturaParameter);
        }
    
        public virtual int SP_InsertarFactura(Nullable<int> idTipoCliente, Nullable<int> idTipoFactura, string nCFFactura, Nullable<int> iDCliente, string rNC_Cliente, string tel_Cliente, string nom_Contacto, string correo_Cliente, string dir_Cliente, Nullable<int> idEstatusFactura, Nullable<decimal> subTotalFactura, Nullable<decimal> totalFactura, Nullable<int> idModoPago, Nullable<decimal> descuento, Nullable<decimal> iTBISFactura, Nullable<System.DateTime> fechaFactura, Nullable<System.DateTime> horaFactura, Nullable<System.DateTime> fechaVencimientoFactura, string notaFactura, Nullable<int> id_Usuario)
        {
            var idTipoClienteParameter = idTipoCliente.HasValue ?
                new ObjectParameter("idTipoCliente", idTipoCliente) :
                new ObjectParameter("idTipoCliente", typeof(int));
    
            var idTipoFacturaParameter = idTipoFactura.HasValue ?
                new ObjectParameter("idTipoFactura", idTipoFactura) :
                new ObjectParameter("idTipoFactura", typeof(int));
    
            var nCFFacturaParameter = nCFFactura != null ?
                new ObjectParameter("NCFFactura", nCFFactura) :
                new ObjectParameter("NCFFactura", typeof(string));
    
            var iDClienteParameter = iDCliente.HasValue ?
                new ObjectParameter("IDCliente", iDCliente) :
                new ObjectParameter("IDCliente", typeof(int));
    
            var rNC_ClienteParameter = rNC_Cliente != null ?
                new ObjectParameter("RNC_Cliente", rNC_Cliente) :
                new ObjectParameter("RNC_Cliente", typeof(string));
    
            var tel_ClienteParameter = tel_Cliente != null ?
                new ObjectParameter("Tel_Cliente", tel_Cliente) :
                new ObjectParameter("Tel_Cliente", typeof(string));
    
            var nom_ContactoParameter = nom_Contacto != null ?
                new ObjectParameter("Nom_Contacto", nom_Contacto) :
                new ObjectParameter("Nom_Contacto", typeof(string));
    
            var correo_ClienteParameter = correo_Cliente != null ?
                new ObjectParameter("Correo_Cliente", correo_Cliente) :
                new ObjectParameter("Correo_Cliente", typeof(string));
    
            var dir_ClienteParameter = dir_Cliente != null ?
                new ObjectParameter("Dir_Cliente", dir_Cliente) :
                new ObjectParameter("Dir_Cliente", typeof(string));
    
            var idEstatusFacturaParameter = idEstatusFactura.HasValue ?
                new ObjectParameter("idEstatusFactura", idEstatusFactura) :
                new ObjectParameter("idEstatusFactura", typeof(int));
    
            var subTotalFacturaParameter = subTotalFactura.HasValue ?
                new ObjectParameter("SubTotalFactura", subTotalFactura) :
                new ObjectParameter("SubTotalFactura", typeof(decimal));
    
            var totalFacturaParameter = totalFactura.HasValue ?
                new ObjectParameter("TotalFactura", totalFactura) :
                new ObjectParameter("TotalFactura", typeof(decimal));
    
            var idModoPagoParameter = idModoPago.HasValue ?
                new ObjectParameter("idModoPago", idModoPago) :
                new ObjectParameter("idModoPago", typeof(int));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(decimal));
    
            var iTBISFacturaParameter = iTBISFactura.HasValue ?
                new ObjectParameter("ITBISFactura", iTBISFactura) :
                new ObjectParameter("ITBISFactura", typeof(decimal));
    
            var fechaFacturaParameter = fechaFactura.HasValue ?
                new ObjectParameter("FechaFactura", fechaFactura) :
                new ObjectParameter("FechaFactura", typeof(System.DateTime));
    
            var horaFacturaParameter = horaFactura.HasValue ?
                new ObjectParameter("HoraFactura", horaFactura) :
                new ObjectParameter("HoraFactura", typeof(System.DateTime));
    
            var fechaVencimientoFacturaParameter = fechaVencimientoFactura.HasValue ?
                new ObjectParameter("FechaVencimientoFactura", fechaVencimientoFactura) :
                new ObjectParameter("FechaVencimientoFactura", typeof(System.DateTime));
    
            var notaFacturaParameter = notaFactura != null ?
                new ObjectParameter("NotaFactura", notaFactura) :
                new ObjectParameter("NotaFactura", typeof(string));
    
            var id_UsuarioParameter = id_Usuario.HasValue ?
                new ObjectParameter("id_Usuario", id_Usuario) :
                new ObjectParameter("id_Usuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertarFactura", idTipoClienteParameter, idTipoFacturaParameter, nCFFacturaParameter, iDClienteParameter, rNC_ClienteParameter, tel_ClienteParameter, nom_ContactoParameter, correo_ClienteParameter, dir_ClienteParameter, idEstatusFacturaParameter, subTotalFacturaParameter, totalFacturaParameter, idModoPagoParameter, descuentoParameter, iTBISFacturaParameter, fechaFacturaParameter, horaFacturaParameter, fechaVencimientoFacturaParameter, notaFacturaParameter, id_UsuarioParameter);
        }
    }
}
