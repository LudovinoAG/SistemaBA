//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sistema_de_Gestión.Modelos
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BAFacturacionEntities : DbContext
    {
        public BAFacturacionEntities()
            : base("name=BAFacturacionEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<VW_ListarVehiculos> VW_ListarVehiculos { get; set; }
        public virtual DbSet<VW_ListarMedidas> VW_ListarMedidas { get; set; }
        public virtual DbSet<VW_ProductosFactura> VW_ProductosFactura { get; set; }
        public virtual DbSet<VW_VerUltimoNumeroFactura> VW_VerUltimoNumeroFactura { get; set; }
        public virtual DbSet<VW_ListarBancos> VW_ListarBancos { get; set; }
        public virtual DbSet<VW_ListarMetodos> VW_ListarMetodos { get; set; }
        public virtual DbSet<VW_EmpleadosFactura> VW_EmpleadosFactura { get; set; }
        public virtual DbSet<VW_ListaTipoFactura> VW_ListaTipoFactura { get; set; }
        public virtual DbSet<VW_ListaEstatusFactura> VW_ListaEstatusFactura { get; set; }
    
        public virtual int SP_InsertarConduce(Nullable<int> id_Conduce, Nullable<int> id_Factura, Nullable<int> id_Empleado, Nullable<int> num_Conduce, Nullable<int> id_Producto, Nullable<int> id_Vehiculo, Nullable<int> id_Medida, Nullable<int> cantidadViajes)
        {
            var id_ConduceParameter = id_Conduce.HasValue ?
                new ObjectParameter("id_Conduce", id_Conduce) :
                new ObjectParameter("id_Conduce", typeof(int));
    
            var id_FacturaParameter = id_Factura.HasValue ?
                new ObjectParameter("id_Factura", id_Factura) :
                new ObjectParameter("id_Factura", typeof(int));
    
            var id_EmpleadoParameter = id_Empleado.HasValue ?
                new ObjectParameter("id_Empleado", id_Empleado) :
                new ObjectParameter("id_Empleado", typeof(int));
    
            var num_ConduceParameter = num_Conduce.HasValue ?
                new ObjectParameter("Num_Conduce", num_Conduce) :
                new ObjectParameter("Num_Conduce", typeof(int));
    
            var id_ProductoParameter = id_Producto.HasValue ?
                new ObjectParameter("id_Producto", id_Producto) :
                new ObjectParameter("id_Producto", typeof(int));
    
            var id_VehiculoParameter = id_Vehiculo.HasValue ?
                new ObjectParameter("id_Vehiculo", id_Vehiculo) :
                new ObjectParameter("id_Vehiculo", typeof(int));
    
            var id_MedidaParameter = id_Medida.HasValue ?
                new ObjectParameter("id_Medida", id_Medida) :
                new ObjectParameter("id_Medida", typeof(int));
    
            var cantidadViajesParameter = cantidadViajes.HasValue ?
                new ObjectParameter("CantidadViajes", cantidadViajes) :
                new ObjectParameter("CantidadViajes", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertarConduce", id_ConduceParameter, id_FacturaParameter, id_EmpleadoParameter, num_ConduceParameter, id_ProductoParameter, id_VehiculoParameter, id_MedidaParameter, cantidadViajesParameter);
        }
    
        public virtual ObjectResult<SP_VerDetallesConduces_Result> SP_VerDetallesConduces(Nullable<int> numFacturaConduce)
        {
            var numFacturaConduceParameter = numFacturaConduce.HasValue ?
                new ObjectParameter("NumFacturaConduce", numFacturaConduce) :
                new ObjectParameter("NumFacturaConduce", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VerDetallesConduces_Result>("SP_VerDetallesConduces", numFacturaConduceParameter);
        }
    
        public virtual ObjectResult<SP_BuscarClienteCodigo_Result> SP_BuscarClienteCodigo(string codigo_Cliente)
        {
            var codigo_ClienteParameter = codigo_Cliente != null ?
                new ObjectParameter("Codigo_Cliente", codigo_Cliente) :
                new ObjectParameter("Codigo_Cliente", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BuscarClienteCodigo_Result>("SP_BuscarClienteCodigo", codigo_ClienteParameter);
        }
    
        public virtual int SP_RealizarPagoFactura(Nullable<int> id_Factura, Nullable<int> id_ModoPago, string conceptoPago, Nullable<int> numCheque, Nullable<int> banco, string cuentaOrigen, Nullable<double> totalPago, Nullable<System.DateTime> fechaPago, string tipoPago, Nullable<int> id_Usuario)
        {
            var id_FacturaParameter = id_Factura.HasValue ?
                new ObjectParameter("id_Factura", id_Factura) :
                new ObjectParameter("id_Factura", typeof(int));
    
            var id_ModoPagoParameter = id_ModoPago.HasValue ?
                new ObjectParameter("id_ModoPago", id_ModoPago) :
                new ObjectParameter("id_ModoPago", typeof(int));
    
            var conceptoPagoParameter = conceptoPago != null ?
                new ObjectParameter("ConceptoPago", conceptoPago) :
                new ObjectParameter("ConceptoPago", typeof(string));
    
            var numChequeParameter = numCheque.HasValue ?
                new ObjectParameter("NumCheque", numCheque) :
                new ObjectParameter("NumCheque", typeof(int));
    
            var bancoParameter = banco.HasValue ?
                new ObjectParameter("Banco", banco) :
                new ObjectParameter("Banco", typeof(int));
    
            var cuentaOrigenParameter = cuentaOrigen != null ?
                new ObjectParameter("CuentaOrigen", cuentaOrigen) :
                new ObjectParameter("CuentaOrigen", typeof(string));
    
            var totalPagoParameter = totalPago.HasValue ?
                new ObjectParameter("TotalPago", totalPago) :
                new ObjectParameter("TotalPago", typeof(double));
    
            var fechaPagoParameter = fechaPago.HasValue ?
                new ObjectParameter("FechaPago", fechaPago) :
                new ObjectParameter("FechaPago", typeof(System.DateTime));
    
            var tipoPagoParameter = tipoPago != null ?
                new ObjectParameter("TipoPago", tipoPago) :
                new ObjectParameter("TipoPago", typeof(string));
    
            var id_UsuarioParameter = id_Usuario.HasValue ?
                new ObjectParameter("id_Usuario", id_Usuario) :
                new ObjectParameter("id_Usuario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RealizarPagoFactura", id_FacturaParameter, id_ModoPagoParameter, conceptoPagoParameter, numChequeParameter, bancoParameter, cuentaOrigenParameter, totalPagoParameter, fechaPagoParameter, tipoPagoParameter, id_UsuarioParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SP_VerMontoPendienteFactura(Nullable<int> idFactura)
        {
            var idFacturaParameter = idFactura.HasValue ?
                new ObjectParameter("idFactura", idFactura) :
                new ObjectParameter("idFactura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SP_VerMontoPendienteFactura", idFacturaParameter);
        }
    
        public virtual ObjectResult<SP_BuscarClienteFacturar_Result> SP_BuscarClienteFacturar(Nullable<int> iD_Cliente)
        {
            var iD_ClienteParameter = iD_Cliente.HasValue ?
                new ObjectParameter("ID_Cliente", iD_Cliente) :
                new ObjectParameter("ID_Cliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BuscarClienteFacturar_Result>("SP_BuscarClienteFacturar", iD_ClienteParameter);
        }
    
        public virtual int SP_InsertarFactura(Nullable<int> idTipoFactura, string nCFFactura, Nullable<int> iDCliente, Nullable<int> idEstatusFactura, Nullable<double> subTotalFactura, Nullable<double> totalFactura, Nullable<int> idModoPago, Nullable<double> descuento, Nullable<double> iTBISFactura, Nullable<System.DateTime> fechaFactura, Nullable<System.TimeSpan> horaFactura, Nullable<System.DateTime> fechaVencimientoFactura, string notaFactura, Nullable<int> id_Usuario, Nullable<int> idPago, Nullable<System.DateTime> fechaValidoNCF)
        {
            var idTipoFacturaParameter = idTipoFactura.HasValue ?
                new ObjectParameter("idTipoFactura", idTipoFactura) :
                new ObjectParameter("idTipoFactura", typeof(int));
    
            var nCFFacturaParameter = nCFFactura != null ?
                new ObjectParameter("NCFFactura", nCFFactura) :
                new ObjectParameter("NCFFactura", typeof(string));
    
            var iDClienteParameter = iDCliente.HasValue ?
                new ObjectParameter("IDCliente", iDCliente) :
                new ObjectParameter("IDCliente", typeof(int));
    
            var idEstatusFacturaParameter = idEstatusFactura.HasValue ?
                new ObjectParameter("idEstatusFactura", idEstatusFactura) :
                new ObjectParameter("idEstatusFactura", typeof(int));
    
            var subTotalFacturaParameter = subTotalFactura.HasValue ?
                new ObjectParameter("SubTotalFactura", subTotalFactura) :
                new ObjectParameter("SubTotalFactura", typeof(double));
    
            var totalFacturaParameter = totalFactura.HasValue ?
                new ObjectParameter("TotalFactura", totalFactura) :
                new ObjectParameter("TotalFactura", typeof(double));
    
            var idModoPagoParameter = idModoPago.HasValue ?
                new ObjectParameter("idModoPago", idModoPago) :
                new ObjectParameter("idModoPago", typeof(int));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(double));
    
            var iTBISFacturaParameter = iTBISFactura.HasValue ?
                new ObjectParameter("ITBISFactura", iTBISFactura) :
                new ObjectParameter("ITBISFactura", typeof(double));
    
            var fechaFacturaParameter = fechaFactura.HasValue ?
                new ObjectParameter("FechaFactura", fechaFactura) :
                new ObjectParameter("FechaFactura", typeof(System.DateTime));
    
            var horaFacturaParameter = horaFactura.HasValue ?
                new ObjectParameter("HoraFactura", horaFactura) :
                new ObjectParameter("HoraFactura", typeof(System.TimeSpan));
    
            var fechaVencimientoFacturaParameter = fechaVencimientoFactura.HasValue ?
                new ObjectParameter("FechaVencimientoFactura", fechaVencimientoFactura) :
                new ObjectParameter("FechaVencimientoFactura", typeof(System.DateTime));
    
            var notaFacturaParameter = notaFactura != null ?
                new ObjectParameter("NotaFactura", notaFactura) :
                new ObjectParameter("NotaFactura", typeof(string));
    
            var id_UsuarioParameter = id_Usuario.HasValue ?
                new ObjectParameter("id_Usuario", id_Usuario) :
                new ObjectParameter("id_Usuario", typeof(int));
    
            var idPagoParameter = idPago.HasValue ?
                new ObjectParameter("idPago", idPago) :
                new ObjectParameter("idPago", typeof(int));
    
            var fechaValidoNCFParameter = fechaValidoNCF.HasValue ?
                new ObjectParameter("FechaValidoNCF", fechaValidoNCF) :
                new ObjectParameter("FechaValidoNCF", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertarFactura", idTipoFacturaParameter, nCFFacturaParameter, iDClienteParameter, idEstatusFacturaParameter, subTotalFacturaParameter, totalFacturaParameter, idModoPagoParameter, descuentoParameter, iTBISFacturaParameter, fechaFacturaParameter, horaFacturaParameter, fechaVencimientoFacturaParameter, notaFacturaParameter, id_UsuarioParameter, idPagoParameter, fechaValidoNCFParameter);
        }
    
        public virtual int SP_CambiarEstadoPedido(Nullable<int> iDCliente, Nullable<int> iDPedido, Nullable<int> newStatus)
        {
            var iDClienteParameter = iDCliente.HasValue ?
                new ObjectParameter("IDCliente", iDCliente) :
                new ObjectParameter("IDCliente", typeof(int));
    
            var iDPedidoParameter = iDPedido.HasValue ?
                new ObjectParameter("IDPedido", iDPedido) :
                new ObjectParameter("IDPedido", typeof(int));
    
            var newStatusParameter = newStatus.HasValue ?
                new ObjectParameter("NewStatus", newStatus) :
                new ObjectParameter("NewStatus", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CambiarEstadoPedido", iDClienteParameter, iDPedidoParameter, newStatusParameter);
        }
    
        public virtual ObjectResult<SP_VerFacturaID_Result> SP_VerFacturaID(Nullable<int> numFactura)
        {
            var numFacturaParameter = numFactura.HasValue ?
                new ObjectParameter("NumFactura", numFactura) :
                new ObjectParameter("NumFactura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VerFacturaID_Result>("SP_VerFacturaID", numFacturaParameter);
        }
    
        public virtual ObjectResult<SP_BuscarPedidosClienteFacturar_Result> SP_BuscarPedidosClienteFacturar(Nullable<int> iD_Cliente, Nullable<int> id_Pedido, string modoReporte, Nullable<int> id_EstatusPedido, Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechaFin, Nullable<int> conduce)
        {
            var iD_ClienteParameter = iD_Cliente.HasValue ?
                new ObjectParameter("ID_Cliente", iD_Cliente) :
                new ObjectParameter("ID_Cliente", typeof(int));
    
            var id_PedidoParameter = id_Pedido.HasValue ?
                new ObjectParameter("id_Pedido", id_Pedido) :
                new ObjectParameter("id_Pedido", typeof(int));
    
            var modoReporteParameter = modoReporte != null ?
                new ObjectParameter("ModoReporte", modoReporte) :
                new ObjectParameter("ModoReporte", typeof(string));
    
            var id_EstatusPedidoParameter = id_EstatusPedido.HasValue ?
                new ObjectParameter("id_EstatusPedido", id_EstatusPedido) :
                new ObjectParameter("id_EstatusPedido", typeof(int));
    
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("FechaInicio", fechaInicio) :
                new ObjectParameter("FechaInicio", typeof(System.DateTime));
    
            var fechaFinParameter = fechaFin.HasValue ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(System.DateTime));
    
            var conduceParameter = conduce.HasValue ?
                new ObjectParameter("Conduce", conduce) :
                new ObjectParameter("Conduce", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BuscarPedidosClienteFacturar_Result>("SP_BuscarPedidosClienteFacturar", iD_ClienteParameter, id_PedidoParameter, modoReporteParameter, id_EstatusPedidoParameter, fechaInicioParameter, fechaFinParameter, conduceParameter);
        }
    
        public virtual ObjectResult<SP_BuscarConducesFactura_Result> SP_BuscarConducesFactura(Nullable<int> iD_Cliente, Nullable<int> id_Pedido, string modoReporte, Nullable<int> id_EstatusPedido, Nullable<System.DateTime> fechaInicio, Nullable<System.DateTime> fechaFin, Nullable<int> conduce)
        {
            var iD_ClienteParameter = iD_Cliente.HasValue ?
                new ObjectParameter("ID_Cliente", iD_Cliente) :
                new ObjectParameter("ID_Cliente", typeof(int));
    
            var id_PedidoParameter = id_Pedido.HasValue ?
                new ObjectParameter("id_Pedido", id_Pedido) :
                new ObjectParameter("id_Pedido", typeof(int));
    
            var modoReporteParameter = modoReporte != null ?
                new ObjectParameter("ModoReporte", modoReporte) :
                new ObjectParameter("ModoReporte", typeof(string));
    
            var id_EstatusPedidoParameter = id_EstatusPedido.HasValue ?
                new ObjectParameter("id_EstatusPedido", id_EstatusPedido) :
                new ObjectParameter("id_EstatusPedido", typeof(int));
    
            var fechaInicioParameter = fechaInicio.HasValue ?
                new ObjectParameter("FechaInicio", fechaInicio) :
                new ObjectParameter("FechaInicio", typeof(System.DateTime));
    
            var fechaFinParameter = fechaFin.HasValue ?
                new ObjectParameter("FechaFin", fechaFin) :
                new ObjectParameter("FechaFin", typeof(System.DateTime));
    
            var conduceParameter = conduce.HasValue ?
                new ObjectParameter("Conduce", conduce) :
                new ObjectParameter("Conduce", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BuscarConducesFactura_Result>("SP_BuscarConducesFactura", iD_ClienteParameter, id_PedidoParameter, modoReporteParameter, id_EstatusPedidoParameter, fechaInicioParameter, fechaFinParameter, conduceParameter);
        }
    
        public virtual int SP_InsertarConduces(Nullable<System.DateTime> fechaPedido, Nullable<System.DateTime> fechaConduce, string nomEmpleado, Nullable<int> numConduce, string nomVehiculo, string placa, Nullable<decimal> capacidad, string producto, Nullable<int> cantidadViajes, Nullable<decimal> cantidad, string nomMedida, Nullable<decimal> precio, Nullable<decimal> subTotal, Nullable<decimal> iTBIS, string descripcion, string estatus)
        {
            var fechaPedidoParameter = fechaPedido.HasValue ?
                new ObjectParameter("FechaPedido", fechaPedido) :
                new ObjectParameter("FechaPedido", typeof(System.DateTime));
    
            var fechaConduceParameter = fechaConduce.HasValue ?
                new ObjectParameter("FechaConduce", fechaConduce) :
                new ObjectParameter("FechaConduce", typeof(System.DateTime));
    
            var nomEmpleadoParameter = nomEmpleado != null ?
                new ObjectParameter("NomEmpleado", nomEmpleado) :
                new ObjectParameter("NomEmpleado", typeof(string));
    
            var numConduceParameter = numConduce.HasValue ?
                new ObjectParameter("NumConduce", numConduce) :
                new ObjectParameter("NumConduce", typeof(int));
    
            var nomVehiculoParameter = nomVehiculo != null ?
                new ObjectParameter("NomVehiculo", nomVehiculo) :
                new ObjectParameter("NomVehiculo", typeof(string));
    
            var placaParameter = placa != null ?
                new ObjectParameter("Placa", placa) :
                new ObjectParameter("Placa", typeof(string));
    
            var capacidadParameter = capacidad.HasValue ?
                new ObjectParameter("Capacidad", capacidad) :
                new ObjectParameter("Capacidad", typeof(decimal));
    
            var productoParameter = producto != null ?
                new ObjectParameter("Producto", producto) :
                new ObjectParameter("Producto", typeof(string));
    
            var cantidadViajesParameter = cantidadViajes.HasValue ?
                new ObjectParameter("CantidadViajes", cantidadViajes) :
                new ObjectParameter("CantidadViajes", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("Cantidad", cantidad) :
                new ObjectParameter("Cantidad", typeof(decimal));
    
            var nomMedidaParameter = nomMedida != null ?
                new ObjectParameter("NomMedida", nomMedida) :
                new ObjectParameter("NomMedida", typeof(string));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("Precio", precio) :
                new ObjectParameter("Precio", typeof(decimal));
    
            var subTotalParameter = subTotal.HasValue ?
                new ObjectParameter("SubTotal", subTotal) :
                new ObjectParameter("SubTotal", typeof(decimal));
    
            var iTBISParameter = iTBIS.HasValue ?
                new ObjectParameter("ITBIS", iTBIS) :
                new ObjectParameter("ITBIS", typeof(decimal));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("Descripcion", descripcion) :
                new ObjectParameter("Descripcion", typeof(string));
    
            var estatusParameter = estatus != null ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertarConduces", fechaPedidoParameter, fechaConduceParameter, nomEmpleadoParameter, numConduceParameter, nomVehiculoParameter, placaParameter, capacidadParameter, productoParameter, cantidadViajesParameter, cantidadParameter, nomMedidaParameter, precioParameter, subTotalParameter, iTBISParameter, descripcionParameter, estatusParameter);
        }
    
        public virtual int SP_InsertarDetallesFactura(Nullable<decimal> subTotalProducto, Nullable<decimal> descuento, Nullable<decimal> iTBIS, Nullable<decimal> totalPedidos, string condicion, string estatus)
        {
            var subTotalProductoParameter = subTotalProducto.HasValue ?
                new ObjectParameter("SubTotalProducto", subTotalProducto) :
                new ObjectParameter("SubTotalProducto", typeof(decimal));
    
            var descuentoParameter = descuento.HasValue ?
                new ObjectParameter("Descuento", descuento) :
                new ObjectParameter("Descuento", typeof(decimal));
    
            var iTBISParameter = iTBIS.HasValue ?
                new ObjectParameter("ITBIS", iTBIS) :
                new ObjectParameter("ITBIS", typeof(decimal));
    
            var totalPedidosParameter = totalPedidos.HasValue ?
                new ObjectParameter("TotalPedidos", totalPedidos) :
                new ObjectParameter("TotalPedidos", typeof(decimal));
    
            var condicionParameter = condicion != null ?
                new ObjectParameter("Condicion", condicion) :
                new ObjectParameter("Condicion", typeof(string));
    
            var estatusParameter = estatus != null ?
                new ObjectParameter("Estatus", estatus) :
                new ObjectParameter("Estatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertarDetallesFactura", subTotalProductoParameter, descuentoParameter, iTBISParameter, totalPedidosParameter, condicionParameter, estatusParameter);
        }
    
        public virtual int SP_ActualizarFactura(Nullable<int> numFactura, Nullable<System.DateTime> fechaFactura, Nullable<System.DateTime> fechaVencimientoFactura)
        {
            var numFacturaParameter = numFactura.HasValue ?
                new ObjectParameter("NumFactura", numFactura) :
                new ObjectParameter("NumFactura", typeof(int));
    
            var fechaFacturaParameter = fechaFactura.HasValue ?
                new ObjectParameter("FechaFactura", fechaFactura) :
                new ObjectParameter("FechaFactura", typeof(System.DateTime));
    
            var fechaVencimientoFacturaParameter = fechaVencimientoFactura.HasValue ?
                new ObjectParameter("FechaVencimientoFactura", fechaVencimientoFactura) :
                new ObjectParameter("FechaVencimientoFactura", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ActualizarFactura", numFacturaParameter, fechaFacturaParameter, fechaVencimientoFacturaParameter);
        }
    
        public virtual ObjectResult<SP_VerDetalleFactura_Result> SP_VerDetalleFactura(Nullable<int> numFactura)
        {
            var numFacturaParameter = numFactura.HasValue ?
                new ObjectParameter("NumFactura", numFactura) :
                new ObjectParameter("NumFactura", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VerDetalleFactura_Result>("SP_VerDetalleFactura", numFacturaParameter);
        }
    }
}
